"use client"

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  ArrowRight, 
  GitBranch, 
  ArrowLeft as ArrowLeftIcon, 
  RotateCcw, 
  ExternalLink,
  Layers,
  Navigation,
  Settings
} from "lucide-react";
import { useBuilder, builderActions } from "@/lib/builderContext";
import { useToast } from "@/hooks/use-toast";

export function FlowDescriptionCard() {
  const { state, dispatch } = useBuilder();
  const { toast } = useToast();
  const [isGeneratingExport, setIsGeneratingExport] = useState(false);

  const continueToExport = async () => {
    if (!state.appFlow) {
      toast({
        title: "No App Flow Available",
        description: "Please generate the app flow first.",
        variant: "destructive"
      });
      return;
    }

    setIsGeneratingExport(true);
    dispatch(builderActions.setGenerating(true));
    dispatch(builderActions.setGenerationProgress(0));

    // Simulate export generation
    const progressSteps = [
      { progress: 25, delay: 600, message: "Compiling unified prompt..." },
      { progress: 50, delay: 800, message: "Creating screen-by-screen prompts..." },
      { progress: 75, delay: 700, message: "Optimizing for different tools..." },
      { progress: 100, delay: 500, message: "Finalizing export package..." }
    ];

    for (const step of progressSteps) {
      await new Promise(resolve => setTimeout(resolve, step.delay));
      dispatch(builderActions.setGenerationProgress(step.progress));
    }

    // Generate export prompts
    const exportPrompts = {
      unifiedPrompt: generateUnifiedPrompt(),
      screenByScreenPrompts: state.screenPrompts,
      targetTool: 'framer' // Default to Framer
    };

    dispatch(builderActions.setExportPrompts(exportPrompts));
    dispatch(builderActions.setGenerating(false));
    dispatch(builderActions.setCurrentCard(6));
    setIsGeneratingExport(false);

    toast({
      title: "Export Package Ready!",
      description: "Your prompt package is ready for download and use.",
    });
  };

  const generateUnifiedPrompt = () => {
    const appIdea = state.appIdea;
    const blueprint = state.appBlueprint;
    const flow = state.appFlow;

    return `# ${appIdea.appName} - Complete App Specification

## App Overview
${appIdea.ideaDescription}

**Platform(s):** ${appIdea.platforms.join(', ')}
**Design Style:** ${appIdea.designStyle}
**Target Audience:** ${appIdea.targetAudience || 'General users'}

## App Structure
${blueprint?.screens.map((screen, index) => 
  `${index + 1}. **${screen.name}**: ${screen.purpose}`
).join('\n')}

## Navigation Flow
${flow?.flowLogic}

## Screen Transitions
${flow?.screenTransitions.map(transition => `â€¢ ${transition}`).join('\n')}

## Conditional Logic
${flow?.conditionalRouting.map(rule => `â€¢ ${rule}`).join('\n')}

## Style Guidelines
- Design Style: ${appIdea.designStyle}
- Platform: ${appIdea.platforms.join(' and ')}
${appIdea.styleDescription ? `- Additional Notes: ${appIdea.styleDescription}` : ''}

## User Motivation
${state.validationQuestions.motivation}

---
Generated by Builder Blueprint AI`;
  };

  if (!state.appFlow) {
    return (
      <div className="text-center py-8">
        <GitBranch className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
        <h3 className="text-lg font-medium text-muted-foreground">No App Flow Generated</h3>
        <p className="text-sm text-muted-foreground">
          Complete the screen prompts generation to create the app flow.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h3 className="text-lg font-semibold flex items-center justify-center gap-2">
          <GitBranch className="h-5 w-5 text-blue-500" />
          ðŸ§­ App Flow & Wireframe Describer
        </h3>
        <p className="text-sm text-muted-foreground">
          Navigation logic and screen relationships for your app
        </p>
      </div>

      {/* Flow Logic */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Layers className="h-4 w-4" />
            Flow Logic
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 p-4 rounded-lg">
            <pre className="text-sm whitespace-pre-wrap font-mono">
              {state.appFlow.flowLogic}
            </pre>
          </div>
        </CardContent>
      </Card>

      {/* Conditional Routing */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <GitBranch className="h-4 w-4" />
            Conditional Routing
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {state.appFlow.conditionalRouting.map((rule, index) => (
              <div key={index} className="flex items-start gap-2 p-2 bg-blue-50 rounded">
                <Badge variant="outline" className="mt-0.5 text-xs">
                  {index + 1}
                </Badge>
                <span className="text-sm">{rule}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Back Button Behavior */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <ArrowLeftIcon className="h-4 w-4" />
            Back Button Behavior
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 p-3 rounded text-sm">
            {state.appFlow.backButtonBehavior}
          </div>
        </CardContent>
      </Card>

      {/* Modal Logic */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <ExternalLink className="h-4 w-4" />
            Modal Logic
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 p-3 rounded text-sm">
            {state.appFlow.modalLogic}
          </div>
        </CardContent>
      </Card>

      {/* Screen Transitions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Navigation className="h-4 w-4" />
            Screen Transitions
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {state.appFlow.screenTransitions.map((transition, index) => (
              <div key={index} className="flex items-center gap-2 p-2 border rounded">
                <Badge variant="secondary" className="text-xs">
                  {index + 1}
                </Badge>
                <span className="text-sm font-mono">{transition}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Visual Flow Representation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <RotateCcw className="h-4 w-4" />
            Visual Flow Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg">
            <div className="text-center space-y-3">
              <div className="flex items-center justify-center gap-2 text-sm">
                <Badge>Start</Badge>
                <ArrowRight className="h-4 w-4" />
                <Badge variant="secondary">Authentication</Badge>
                <ArrowRight className="h-4 w-4" />
                <Badge variant="secondary">Main App</Badge>
                <ArrowRight className="h-4 w-4" />
                <Badge>Features</Badge>
              </div>
              <Separator />
              <div className="text-xs text-muted-foreground">
                Users flow through authentication, land on the main dashboard, and navigate to specific features based on their needs and permissions.
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* App Architecture Summary */}
      <Card className="border-2 border-green-200 bg-green-50/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base text-green-800">
            <Settings className="h-4 w-4" />
            Architecture Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <h5 className="font-medium text-green-800">Screens</h5>
              <p className="text-green-700">{state.appBlueprint?.screens.length || 0} total screens</p>
            </div>
            <div>
              <h5 className="font-medium text-green-800">User Roles</h5>
              <p className="text-green-700">{state.appBlueprint?.userRoles.length || 0} role types</p>
            </div>
            <div>
              <h5 className="font-medium text-green-800">Data Models</h5>
              <p className="text-green-700">{state.appBlueprint?.dataModels.length || 0} data entities</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Continue Button */}
      <div className="flex justify-end pt-4">
        <Button 
          onClick={continueToExport}
          disabled={isGeneratingExport}
          className="flex items-center gap-2"
          size="lg"
        >
          {isGeneratingExport ? (
            <>
              <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full" />
              Generating Export...
            </>
          ) : (
            <>
              Generate Export Package
              <ArrowRight className="h-4 w-4" />
            </>
          )}
        </Button>
      </div>
    </div>
  );
}
