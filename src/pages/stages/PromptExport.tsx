import React, { useState } from 'react';
import { StageNavigation } from "@/components/StageNavigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import {
  Package,
  Download,
  Copy,
  CheckCircle,
  Eye,
  Star,
  History,
  Save,
  Share,
  Archive,
  Settings,
  Clock
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ProjectExport {
  id: string;
  name: string;
  description: string;
  targetTool: string;
  createdAt: Date;
  lastModified: Date;
  version: string;
  qualityScore: number;
  completeness: number;
  formats: ExportFormat[];
}

interface ExportFormat {
  type: 'master' | 'tool-specific' | 'documentation' | 'code' | 'json';
  name: string;
  description: string;
  content: string;
  size: string;
}

interface ProjectHistory {
  id: string;
  projectId: string;
  version: string;
  changes: string[];
  timestamp: Date;
  author: string;
}

const PromptExport = () => {
  const [projectName, setProjectName] = useState("College Resource Exchange App");
  const [projectDescription, setProjectDescription] = useState("A mobile-first platform for college students to exchange academic resources");
  const [targetTool, setTargetTool] = useState("Framer");
  const [qualityScore] = useState(92);
  const [completeness] = useState(88);
  const [isExporting, setIsExporting] = useState(false);
  const [exportProgress, setExportProgress] = useState(0);
  const [savedProjects, setSavedProjects] = useState<ProjectExport[]>([]);
  const [projectHistory, setProjectHistory] = useState<ProjectHistory[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const { toast } = useToast();

  const exportFormats: ExportFormat[] = [
    {
      type: 'master',
      name: 'Master Prompt',
      description: 'Complete project prompt with all stages combined',
      content: '',
      size: '~15KB'
    },
    {
      type: 'tool-specific',
      name: `${targetTool} Optimized`,
      description: `Prompt specifically formatted for ${targetTool}`,
      content: '',
      size: '~12KB'
    },
    {
      type: 'documentation',
      name: 'Technical Documentation',
      description: 'Detailed specs, wireframes, and implementation guide',
      content: '',
      size: '~8KB'
    },
    {
      type: 'code',
      name: 'Code Templates',
      description: 'Starter code and configuration files',
      content: '',
      size: '~5KB'
    },
    {
      type: 'json',
      name: 'Project JSON',
      description: 'Structured data export for integration',
      content: '',
      size: '~3KB'
    }
  ];

  const generateExportContent = (format: ExportFormat): string => {
    const baseHeader = `# ${projectName}
Generated by PromptForge on ${new Date().toLocaleDateString()}
Target Tool: ${targetTool}
Quality Score: ${qualityScore}%
Completeness: ${completeness}%

## Project Description
${projectDescription}

`;

    switch (format.type) {
      case 'master':
        return baseHeader + masterPrompt;
      case 'tool-specific':
        return baseHeader + generateToolSpecificPrompt();
      case 'documentation':
        return baseHeader + generateDocumentation();
      case 'code':
        return baseHeader + generateCodeTemplates();
      case 'json':
        return JSON.stringify(generateProjectJSON(), null, 2);
      default:
        return baseHeader + masterPrompt;
    }
  };

  const generateToolSpecificPrompt = (): string => {
    return `
# ${targetTool}-Specific Implementation Guide

## Tool Configuration
- Component Library: ${targetTool} default components
- Responsive Breakpoints: Mobile-first approach
- Animation System: ${targetTool} native animations
- State Management: ${targetTool} built-in state handling

## Implementation Steps
1. Set up project structure
2. Configure design system
3. Build component hierarchy
4. Implement navigation flow
5. Add interactive behaviors
6. Test and optimize

${masterPrompt}
`;
  };

  const generateDocumentation = (): string => {
    return `
# Technical Documentation

## Architecture Overview
- Frontend: ${targetTool} application
- Backend: Firebase/Supabase
- Database: Firestore/PostgreSQL
- Authentication: Firebase Auth
- Storage: Firebase Storage/S3

## User Stories
1. As a student, I want to list my textbooks for exchange
2. As a student, I want to search for specific academic resources
3. As a student, I want to communicate securely with other students
4. As a student, I want to track my exchange history

## API Endpoints
- GET /api/listings - Fetch resource listings
- POST /api/listings - Create new listing
- GET /api/messages - Fetch user messages
- POST /api/messages - Send message

## Database Schema
- Users: id, name, email, university, verified
- Listings: id, title, description, price, condition, user_id
- Messages: id, content, sender_id, receiver_id, timestamp
- Transactions: id, listing_id, buyer_id, seller_id, status

${masterPrompt}
`;
  };

  const generateCodeTemplates = (): string => {
    return `
# Code Templates and Configuration

## Package.json Dependencies
\`\`\`json
{
  "dependencies": {
    "react": "^18.0.0",
    "react-router-dom": "^6.0.0",
    "firebase": "^9.0.0",
    "framer-motion": "^6.0.0"
  }
}
\`\`\`

## Environment Variables
\`\`\`
REACT_APP_FIREBASE_API_KEY=your_api_key
REACT_APP_FIREBASE_AUTH_DOMAIN=your_domain
REACT_APP_FIREBASE_PROJECT_ID=your_project_id
\`\`\`

## Component Structure
\`\`\`
src/
  components/
    Header.tsx
    SearchBar.tsx
    ListingCard.tsx
    ChatInterface.tsx
  pages/
    Home.tsx
    Search.tsx
    Profile.tsx
    Messages.tsx
  hooks/
    useAuth.tsx
    useListings.tsx
  utils/
    firebase.ts
    api.ts
\`\`\`

${masterPrompt}
`;
  };

  const generateProjectJSON = () => {
    return {
      project: {
        name: projectName,
        description: projectDescription,
        targetTool: targetTool,
        version: "1.0.0",
        createdAt: new Date().toISOString(),
        qualityScore: qualityScore,
        completeness: completeness
      },
      stages: {
        toolAdaptive: { completed: true, tool: targetTool },
        ideaInterpreter: { completed: true, analysis: "Complete" },
        appSkeleton: { completed: true, screens: 5 },
        uiPrompts: { completed: true, screensGenerated: 5 },
        logicFlow: { completed: true, rulesCount: 12 },
        promptExport: { completed: true, formats: exportFormats.length }
      },
      metadata: {
        totalPromptLength: masterPrompt.length,
        estimatedBuildTime: "2-3 weeks",
        complexity: "Medium",
        recommendedTeamSize: "2-3 developers"
      }
    };
  };

  const handleExport = async (format: ExportFormat) => {
    setIsExporting(true);
    setExportProgress(0);

    // Simulate export progress
    const progressSteps = [20, 40, 60, 80, 100];
    for (const step of progressSteps) {
      await new Promise(resolve => setTimeout(resolve, 300));
      setExportProgress(step);
    }

    const content = generateExportContent(format);
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${projectName.replace(/\s+/g, '-').toLowerCase()}-${format.type}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    setIsExporting(false);
    setExportProgress(0);

    toast({
      title: "Export Complete",
      description: `${format.name} has been downloaded successfully.`,
    });
  };

  const handleSaveProject = () => {
    const newProject: ProjectExport = {
      id: Date.now().toString(),
      name: projectName,
      description: projectDescription,
      targetTool: targetTool,
      createdAt: new Date(),
      lastModified: new Date(),
      version: "1.0.0",
      qualityScore: qualityScore,
      completeness: completeness,
      formats: exportFormats.map(format => ({
        ...format,
        content: generateExportContent(format)
      }))
    };

    setSavedProjects(prev => [newProject, ...prev]);

    // Add to history
    const historyEntry: ProjectHistory = {
      id: Date.now().toString(),
      projectId: newProject.id,
      version: "1.0.0",
      changes: ["Initial project creation", "All stages completed"],
      timestamp: new Date(),
      author: "Current User"
    };

    setProjectHistory(prev => [historyEntry, ...prev]);

    toast({
      title: "Project Saved",
      description: "Your project has been saved to the library.",
    });
  };

  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: "Copied to Clipboard",
      description: "Content has been copied to your clipboard.",
    });
  };

  const handleShareProject = () => {
    const shareData = {
      title: projectName,
      text: projectDescription,
      url: window.location.href
    };

    if (navigator.share) {
      navigator.share(shareData);
    } else {
      copyToClipboard(window.location.href);
    }
  };

  const masterPrompt = `# College Resource Exchange App - Complete Build Guide

## App Overview
A mobile-first platform for college students to exchange academic resources like textbooks, notes, and equipment through secure in-app communication and location-based discovery.

## Target Tool: Framer
This prompt is optimized for Framer's AI assistant and component system.

## Design System
- **Primary Color:** Professional Blue (#2563eb)
- **Design Language:** Material Design principles
- **Device Target:** Mobile-first with responsive scaling
- **Typography:** Clean, readable fonts with proper hierarchy

## Complete App Structure

### 1. Home Screen
Create a welcoming dashboard with:
- Top navigation: app logo (left), notification bell (right)
- Search bar with placeholder "What are you looking for?"
- Personal greeting: "Hi, [Username]"
- Featured resources carousel (3-4 items)
- Quick action grid (2x2): "Post Resource", "Browse Books", "My Exchanges", "Messages"
- Recent activity feed showing latest community activity
- Bottom tab navigation: Home, Search, Post, Messages, Profile

### 2. Search & Browse Screen
Design a comprehensive search interface:
- Persistent search input with filter icon
- Horizontal category chips: "Textbooks", "Notes", "Equipment", "Study Guides"
- Sort dropdown: "Recent", "Distance", "Price", "Rating"
- Resource grid (2 columns mobile, 3-4 desktop)
- Each card: thumbnail, title, price/type, distance, user rating
- Infinite scroll with loading states

### 3. Resource Details Screen
Create detailed resource view:
- Full-width image carousel with multiple photos
- Share and favorite icons (top-right overlay)
- Resource info card: title, condition badge, price/exchange type
- Owner profile section: avatar, name, rating, "Message" button
- Expandable description with "Read more"
- Subject/course tags
- Primary CTA: "Contact Owner" button
- Secondary actions: "Add to Wishlist", "Report"
- Reviews/comments section
- "Similar Resources" recommendations

### 4. Messaging Screen
Build communication hub:
- Conversation list with user avatars, names, last message, timestamp
- Unread indicators and online status
- Search conversations capability
- Individual chat view with message bubbles (sent: right/blue, received: left/gray)
- Photo/image sharing
- Quick actions: "Share Location", "Make Offer"
- Input field with send button and attachments

### 5. User Profile Screen
Design comprehensive profile:
- Large avatar with edit option
- Username, join date, location, rating
- Stats cards: Items Listed, Successful Exchanges, Average Rating
- Activity tabs: "My Listings", "Exchange History", "Reviews", "Wishlist"
- Settings access and logout

## Navigation Logic
- Unauthenticated users redirected to login when accessing protected features
- "Contact Owner" → Login check → Chat screen
- Tab navigation accessible from any screen
- Back navigation with proper state management

## Data Requirements
- User authentication (Firebase Auth)
- Resource listings database (Firestore)
- Real-time messaging (Firebase Realtime Database)
- Image storage (Firebase Storage)
- Push notifications (FCM)
- Location services integration

## Key Interactions
- Tap resource card → Navigate to details
- Tap "Message" → Start conversation
- Pull to refresh on lists
- Swipe actions where appropriate
- Loading states for all async operations

## Responsive Behavior
- Mobile: 2-column grids, bottom navigation
- Tablet: 3-column grids, side navigation option
- Desktop: 4-column grids, full sidebar navigation

This prompt provides complete specifications for building a fully functional college resource exchange app in Framer.`;



  return (
    <div className="min-h-screen bg-background">
      <StageNavigation />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto space-y-8">
          {/* Header */}
          <div className="text-center space-y-4">
            <h1 className="text-4xl font-bold">Prompt Export Composer</h1>
            <p className="text-xl text-muted-foreground">
              Package and export your complete project with history tracking and multiple formats
            </p>
          </div>

          {/* Project Configuration */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Project Configuration
              </CardTitle>
              <CardDescription>
                Configure your project details before export
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Project Name</label>
                  <Input
                    value={projectName}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setProjectName(e.target.value)}
                    placeholder="Enter project name..."
                  />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Target Tool</label>
                  <Select value={targetTool} onValueChange={setTargetTool}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Framer">Framer</SelectItem>
                      <SelectItem value="Uizard">Uizard</SelectItem>
                      <SelectItem value="Adalo">Adalo</SelectItem>
                      <SelectItem value="Builder.io">Builder.io</SelectItem>
                      <SelectItem value="FlutterFlow">FlutterFlow</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Project Description</label>
                <Textarea
                  value={projectDescription}
                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setProjectDescription(e.target.value)}
                  placeholder="Describe your project..."
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* Quality & Completeness Score */}
          <div className="grid md:grid-cols-2 gap-6">
            <Card className="border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950">
              <CardContent className="pt-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
                    <Star className="h-5 w-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-medium text-green-800 dark:text-green-200">
                      Quality Score: {qualityScore}%
                    </p>
                    <p className="text-sm text-green-600 dark:text-green-300">
                      Excellent prompt quality
                    </p>
                  </div>
                </div>
                <Progress value={qualityScore} className="h-2" />
              </CardContent>
            </Card>

            <Card className="border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950">
              <CardContent className="pt-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                    <CheckCircle className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <p className="font-medium text-blue-800 dark:text-blue-200">
                      Completeness: {completeness}%
                    </p>
                    <p className="text-sm text-blue-600 dark:text-blue-300">
                      All stages completed
                    </p>
                  </div>
                </div>
                <Progress value={completeness} className="h-2" />
              </CardContent>
            </Card>
          </div>

          {/* Project Actions */}
          <div className="flex items-center gap-4">
            <Button onClick={handleSaveProject} variant="outline">
              <Save className="h-4 w-4 mr-2" />
              Save Project
            </Button>
            <Button onClick={handleShareProject} variant="outline">
              <Share className="h-4 w-4 mr-2" />
              Share Project
            </Button>
            <Button onClick={() => setShowHistory(!showHistory)} variant="outline">
              <History className="h-4 w-4 mr-2" />
              {showHistory ? 'Hide' : 'Show'} History
            </Button>
          </div>

          {/* Export Formats */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="h-5 w-5" />
                Export Formats
              </CardTitle>
              <CardDescription>
                Choose from multiple export formats optimized for different use cases
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {exportFormats.map((format) => (
                  <Card key={format.type} className="relative hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <Badge variant={format.type === 'master' ? 'default' : 'secondary'} className="text-xs">
                            {format.name}
                          </Badge>
                          <span className="text-xs text-muted-foreground">{format.size}</span>
                        </div>

                        <p className="text-sm text-muted-foreground">{format.description}</p>

                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            onClick={() => handleExport(format)}
                            disabled={isExporting}
                            className="flex-1"
                          >
                            <Download className="h-3 w-3 mr-1" />
                            Export
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => copyToClipboard(generateExportContent(format))}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {isExporting && (
                <div className="mt-6 space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Generating export...</span>
                    <span>{exportProgress}%</span>
                  </div>
                  <Progress value={exportProgress} className="w-full" />
                </div>
              )}
            </CardContent>
          </Card>

          {/* Project History */}
          {showHistory && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <History className="h-5 w-5" />
                  Project History
                </CardTitle>
                <CardDescription>
                  Track changes and versions of your project
                </CardDescription>
              </CardHeader>
              <CardContent>
                {projectHistory.length > 0 ? (
                  <div className="space-y-4">
                    {projectHistory.map((entry) => (
                      <div key={entry.id} className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <Badge variant="outline" className="text-xs">v{entry.version}</Badge>
                            <span className="text-sm font-medium">{entry.author}</span>
                          </div>
                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <Clock className="h-3 w-3" />
                            {entry.timestamp.toLocaleDateString()}
                          </div>
                        </div>
                        <div className="space-y-1">
                          {entry.changes.map((change, index) => (
                            <div key={index} className="text-sm text-muted-foreground">
                              • {change}
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <History className="h-8 w-8 mx-auto mb-2 opacity-50" />
                    <p>No project history yet. Save your project to start tracking changes.</p>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Saved Projects Library */}
          {savedProjects.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Archive className="h-5 w-5" />
                  Project Library ({savedProjects.length})
                </CardTitle>
                <CardDescription>
                  Your saved projects and exports
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4">
                  {savedProjects.slice(0, 4).map((project) => (
                    <Card key={project.id} className="border-muted">
                      <CardContent className="p-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium">{project.name}</h4>
                            <Badge variant="outline" className="text-xs">{project.targetTool}</Badge>
                          </div>
                          <p className="text-sm text-muted-foreground line-clamp-2">
                            {project.description}
                          </p>
                          <div className="flex items-center justify-between text-xs text-muted-foreground">
                            <span>v{project.version}</span>
                            <span>{project.lastModified.toLocaleDateString()}</span>
                          </div>
                          <div className="flex gap-2 pt-2">
                            <Button size="sm" variant="outline" className="flex-1">
                              <Eye className="h-3 w-3 mr-1" />
                              View
                            </Button>
                            <Button size="sm" variant="outline" className="flex-1">
                              <Download className="h-3 w-3 mr-1" />
                              Export
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

        </div>
      </div>
    </div>
  );
};

export default PromptExport;